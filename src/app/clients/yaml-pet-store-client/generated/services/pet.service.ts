/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for Pet controller
* Do not edit this file manually
*/
import { Injectable, inject } from "@angular/core";
import { HttpClient, HttpParams, HttpHeaders, HttpContext, HttpResponse, HttpEvent, HttpContextToken } from "@angular/common/http";
import { Observable, map } from "rxjs";
import { BASE_PATH_PETSTOREYAML, CLIENT_CONTEXT_TOKEN_PETSTOREYAML } from "../tokens";
import { ApiResponse, Pet, RequestOptions } from "../models";

@Injectable({ providedIn: "root" })
export class PetService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_PETSTOREYAML);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_PETSTOREYAML;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'PetStoreYaml');
    }

    addPet(pet: Pet, observe?: 'body', options?: RequestOptions<'json'>): Observable<Pet>;
    addPet(pet: Pet, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<Pet>>;
    addPet(pet: Pet, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<Pet>>;
    /** Add a new pet to the store. */
    addPet(pet: Pet, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/pet`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, pet, requestOptions);
    }

    updatePet(pet: Pet, observe?: 'body', options?: RequestOptions<'json'>): Observable<Pet>;
    updatePet(pet: Pet, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<Pet>>;
    updatePet(pet: Pet, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<Pet>>;
    /** Update an existing pet by Id. */
    updatePet(pet: Pet, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/pet`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.put(url, pet, requestOptions);
    }

    findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe?: 'body', options?: RequestOptions<'json'>): Observable<Pet[]>;
    findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<Pet[]>>;
    findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<Pet[]>>;
    /** Multiple status values can be provided with comma separated strings. */
    findPetsByStatus(status?: 'available' | 'pending' | 'sold', observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/pet/findByStatus`;

        let params = new HttpParams();
        if (status !== undefined) {
            params = params.set('status', String(status));
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    findPetsByTags(tags?: string[], observe?: 'body', options?: RequestOptions<'json'>): Observable<Pet[]>;
    findPetsByTags(tags?: string[], observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<Pet[]>>;
    findPetsByTags(tags?: string[], observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<Pet[]>>;
    /** Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing. */
    findPetsByTags(tags?: string[], observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/pet/findByTags`;

        let params = new HttpParams();
        if (tags !== undefined) {
            params = params.set('tags', String(tags));
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    getPetById(petId: number, observe?: 'body', options?: RequestOptions<'json'>): Observable<Pet>;
    getPetById(petId: number, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<Pet>>;
    getPetById(petId: number, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<Pet>>;
    /** Returns a single pet. */
    getPetById(petId: number, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/pet/${petId}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<Pet>;
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<Pet>>;
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<Pet>>;
    /** Updates a pet resource based on the form data. */
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/pet/${petId}`;

        let params = new HttpParams();
        if (name !== undefined) {
            params = params.set('name', String(name));
        }
        if (status !== undefined) {
            params = params.set('status', String(status));
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    deletePet(petId: number, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    deletePet(petId: number, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    deletePet(petId: number, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    /** Delete a pet. */
    deletePet(petId: number, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/pet/${petId}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.delete(url, requestOptions);
    }

    uploadFile(petId: number, additionalMetadata?: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<ApiResponse>;
    uploadFile(petId: number, additionalMetadata?: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<ApiResponse>>;
    uploadFile(petId: number, additionalMetadata?: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<ApiResponse>>;
    /** Upload image of the pet. */
    uploadFile(petId: number, additionalMetadata?: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/pet/${petId}/uploadImage`;

        let params = new HttpParams();
        if (additionalMetadata !== undefined) {
            params = params.set('additionalMetadata', String(additionalMetadata));
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }
}
