/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* `httpResource` is still an experimental feature - NOT PRODUCTION READY
* Generated Angular service for UserResource
* Do not edit this file manually
*/
import { HttpContext, HttpContextToken, HttpHeaders, HttpParams, httpResource, HttpResourceOptions, HttpResourceRef, HttpResourceRequest } from "@angular/common/http";
import { inject, Injectable, Signal } from "@angular/core";
import { BASE_PATH_PETSTOREURL, CLIENT_CONTEXT_TOKEN_PETSTOREURL } from "../tokens";
import { HttpParamsBuilder } from "../utils/http-params-builder";
import { User } from "../models";

@Injectable({ providedIn: "root" })
export class UserResource {
    private readonly basePath: string = inject(BASE_PATH_PETSTOREURL);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_PETSTOREURL;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'PetStoreUrl');
    }

    loginUser(username: Signal<string | undefined> | string | undefined, password: Signal<string | undefined> | string | undefined, resourceOptions: HttpResourceOptions<string, string> & { defaultValue: NoInfer<string> }, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<string>;
    loginUser(username?: Signal<string | undefined> | string, password?: Signal<string | undefined> | string, resourceOptions?: HttpResourceOptions<string, string>, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<string | undefined>;
    /** Log into the system. */
    loginUser(username?: Signal<string | undefined> | string, password?: Signal<string | undefined> | string, resourceOptions?: HttpResourceOptions<string, string>, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<string | undefined> {
        return httpResource.text(() => {
            let params = new HttpParams();
            const usernameValue = typeof username === 'function' ? username() : username;
            if (usernameValue != null) {
                params = HttpParamsBuilder.addToHttpParams(params, usernameValue, 'username');
            }
            const passwordValue = typeof password === 'function' ? password() : password;
            if (passwordValue != null) {
                params = HttpParamsBuilder.addToHttpParams(params, passwordValue, 'password');
            }
            return {
                url: `${this.basePath}/user/login`,
                method: "GET",
                params,
                responseType: 'text' as 'text',
                context: this.createContextWithClientId(requestOptions?.context),
                ...requestOptions
            }
        }, resourceOptions);
    }

    logoutUser(resourceOptions: HttpResourceOptions<any, unknown> & { defaultValue: NoInfer<any> }, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<any>;
    logoutUser(resourceOptions?: HttpResourceOptions<any, unknown>, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<any | undefined>;
    /** Log user out of the system. */
    logoutUser(resourceOptions?: HttpResourceOptions<any, unknown>, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<any | undefined> {
        return httpResource(() => {
            return {
                url: `${this.basePath}/user/logout`,
                method: "GET",
                context: this.createContextWithClientId(requestOptions?.context),
                ...requestOptions
            }
        }, resourceOptions);
    }

    getUserByName(username: Signal<string> | string, resourceOptions: HttpResourceOptions<User, unknown> & { defaultValue: NoInfer<User> }, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<User>;
    getUserByName(username: Signal<string> | string, resourceOptions?: HttpResourceOptions<User, unknown>, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<User | undefined>;
    /** Get user detail based on username. */
    getUserByName(username: Signal<string> | string, resourceOptions?: HttpResourceOptions<User, unknown>, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<User | undefined> {
        return httpResource(() => {
            return {
                url: `${this.basePath}/user/${typeof username === 'function' ? username() : username}`,
                method: "GET",
                context: this.createContextWithClientId(requestOptions?.context),
                ...requestOptions
            }
        }, resourceOptions);
    }
}
