/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for Pet controller
* Do not edit this file manually
*/
import { Injectable, inject } from "@angular/core";
import { HttpClient, HttpParams, HttpHeaders, HttpContext, HttpResponse, HttpEvent } from "@angular/common/http";
import { Observable } from "rxjs";
import { BASE_PATH_PETSTOREURL, CLIENT_CONTEXT_TOKEN_PETSTOREURL } from "../tokens";
import { ApiResponse, Pet } from "../models";

@Injectable({ providedIn: "root" })
export class PetService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_PETSTOREURL);
    private readonly clientContextToken: any = CLIENT_CONTEXT_TOKEN_PETSTOREURL;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {

        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'PetStoreUrl');
    }

    addPet(pet: Pet, observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<Pet>;
    addPet(pet: Pet, observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<Pet>>;
    addPet(pet: Pet, observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<Pet>>;
    addPet(pet: Pet, observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/pet`;

        const requestOptions: any = {
          observe: observe as any,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, pet, requestOptions);
    }

    updatePet(pet: Pet, observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<Pet>;
    updatePet(pet: Pet, observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<Pet>>;
    updatePet(pet: Pet, observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<Pet>>;
    updatePet(pet: Pet, observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/pet`;

        const requestOptions: any = {
          observe: observe as any,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.put(url, pet, requestOptions);
    }

    findPetsByStatus(status: 'available' | 'pending' | 'sold', observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<Pet[]>;
    findPetsByStatus(status: 'available' | 'pending' | 'sold', observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<Pet[]>>;
    findPetsByStatus(status: 'available' | 'pending' | 'sold', observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<Pet[]>>;
    findPetsByStatus(status: 'available' | 'pending' | 'sold', observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/pet/findByStatus`;

        let params = new HttpParams();
        if (status !== undefined) {
          params = params.set('status', String(status));
        }

        const requestOptions: any = {
          observe: observe as any,
          params,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    findPetsByTags(tags: string[], observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<Pet[]>;
    findPetsByTags(tags: string[], observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<Pet[]>>;
    findPetsByTags(tags: string[], observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<Pet[]>>;
    findPetsByTags(tags: string[], observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/pet/findByTags`;

        let params = new HttpParams();
        if (tags !== undefined) {
          params = params.set('tags', String(tags));
        }

        const requestOptions: any = {
          observe: observe as any,
          params,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    getPetById(petId: number, observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<Pet>;
    getPetById(petId: number, observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<Pet>>;
    getPetById(petId: number, observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<Pet>>;
    getPetById(petId: number, observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/pet/${petId}`;

        const requestOptions: any = {
          observe: observe as any,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<Pet>;
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<Pet>>;
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<Pet>>;
    updatePetWithForm(petId: number, name?: string, status?: string, observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/pet/${petId}`;

        let params = new HttpParams();
        if (name !== undefined) {
          params = params.set('name', String(name));
        }
        if (status !== undefined) {
          params = params.set('status', String(status));
        }

        const requestOptions: any = {
          observe: observe as any,
          params,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }

    deletePet(petId: number, observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<any>;
    deletePet(petId: number, observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<any>>;
    deletePet(petId: number, observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<any>>;
    deletePet(petId: number, observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/pet/${petId}`;

        const requestOptions: any = {
          observe: observe as any,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.delete(url, requestOptions);
    }

    uploadFile(petId: number, additionalMetadata?: string, observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<ApiResponse>;
    uploadFile(petId: number, additionalMetadata?: string, observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<ApiResponse>>;
    uploadFile(petId: number, additionalMetadata?: string, observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<ApiResponse>>;
    uploadFile(petId: number, additionalMetadata?: string, observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/pet/${petId}/uploadImage`;

        let params = new HttpParams();
        if (additionalMetadata !== undefined) {
          params = params.set('additionalMetadata', String(additionalMetadata));
        }

        const requestOptions: any = {
          observe: observe as any,
          params,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, null, requestOptions);
    }
}
