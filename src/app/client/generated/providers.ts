/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated provider functions for easy setup
* Do not edit this file manually
*/
import { EnvironmentProviders, Provider, makeEnvironmentProviders } from "@angular/core";
import { HTTP_INTERCEPTORS } from "@angular/common/http";
import { BASE_PATH } from "./tokens";
import { DateInterceptor } from "./utils/date-transformer";

/** Configuration options for ng-openapi providers */
export interface NgOpenapiConfig {
    /** Base API URL */
    basePath: string;
    /** Enable automatic date transformation (default: true) */
    enableDateTransform?: boolean;
}

/** Provides all necessary configuration for ng-openapi generated services */
/** */
/** @example */
/** ```typescript */
/** // In your app.config.ts */
/** import { provideNgOpenapi } from './api/providers'; */
/** */
/** export const appConfig: ApplicationConfig = { */
/**   providers: [ */
/**     provideNgOpenapi({ */
/**       basePath: 'https://api.example.com' */
/**     }), */
/**     // other providers... */
/**   ] */
/** }; */
/** ``` */
export function provideNgOpenapi(config: NgOpenapiConfig): EnvironmentProviders {

    const providers: Provider[] = [
        // Base path token
        {
            provide: BASE_PATH,
            useValue: config.basePath
        }
    ];

    // Add date interceptor if enabled (default: true)
    if (config.enableDateTransform !== false) {
        providers.push({
            provide: HTTP_INTERCEPTORS,
            useClass: DateInterceptor,
            multi: true
        });
    }

    return makeEnvironmentProviders(providers);
}

/** Alternative function for cases where you need to handle async configuration */
/** */
/** @example */
/** ```typescript */
/** // In your app.config.ts */
/** import { provideNgOpenapiAsync } from './api/providers'; */
/** */
/** export const appConfig: ApplicationConfig = { */
/**   providers: [ */
/**     provideNgOpenapiAsync({ */
/**       basePath: () => import('./config').then(c => c.apiConfig.baseUrl) */
/**     }), */
/**     // other providers... */
/**   ] */
/** }; */
/** ``` */
export function provideNgOpenapiAsync(config: {
      basePath: string | (() => Promise<string>);
      enableDateTransform?: boolean;
    }): EnvironmentProviders {

    const providers: Provider[] = [];

    // Handle async base path
    if (typeof config.basePath === 'string') {
        providers.push({
            provide: BASE_PATH,
            useValue: config.basePath
        });
    } else {
        providers.push({
            provide: BASE_PATH,
            useFactory: config.basePath
        });
    }

    // Add date interceptor if enabled (default: true)
    if (config.enableDateTransform !== false) {
        providers.push({
            provide: HTTP_INTERCEPTORS,
            useClass: DateInterceptor,
            multi: true
        });
    }

    return makeEnvironmentProviders(providers);
}
