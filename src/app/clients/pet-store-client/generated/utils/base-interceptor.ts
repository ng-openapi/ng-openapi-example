/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Base Interceptor for client PetStore
* Do not edit this file manually
*/
import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpContextToken } from "@angular/common/http";
import { inject, Injectable } from "@angular/core";
import { Observable } from "rxjs";
import { HTTP_INTERCEPTORS_PETSTORE, CLIENT_CONTEXT_TOKEN_PETSTORE } from "../tokens";

@Injectable()
export class PetStoreBaseInterceptor implements HttpInterceptor {
    private readonly httpInterceptors: HttpInterceptor[] = inject(HTTP_INTERCEPTORS_PETSTORE);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_PETSTORE;

    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {

            // Check if this request belongs to this client using HttpContext
            if (!req.context.has(this.clientContextToken)) {
              // This request doesn't belong to this client, pass it through
              return next.handle(req);
            }

            // Apply client-specific interceptors in reverse order
            let handler = next;

            handler = this.httpInterceptors.reduceRight(
              (next, interceptor) => ({
                handle: (request: HttpRequest<any>) => interceptor.intercept(request, next)
              }),
              handler
            );

            return handler.handle(req);
    }
}
