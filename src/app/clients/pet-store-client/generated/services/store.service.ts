/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for Store controller
* Do not edit this file manually
*/
import { Injectable, inject } from "@angular/core";
import { HttpClient, HttpParams, HttpHeaders, HttpContext, HttpResponse, HttpEvent } from "@angular/common/http";
import { Observable } from "rxjs";
import { BASE_PATH_PETSTORE, CLIENT_CONTEXT_TOKEN_PETSTORE } from "../tokens";
import { Order } from "../models";

@Injectable({ providedIn: "root" })
export class StoreService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_PETSTORE);
    private readonly clientContextToken: any = CLIENT_CONTEXT_TOKEN_PETSTORE;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {

        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'PetStore');
    }

    getInventory(observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<Record<string, unknown>>;
    getInventory(observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<Record<string, unknown>>>;
    getInventory(observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<Record<string, unknown>>>;
    getInventory(observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/store/inventory`;

        const requestOptions: any = {
          observe: observe as any,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    placeOrder(order?: Order, observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<Order>;
    placeOrder(order?: Order, observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<Order>>;
    placeOrder(order?: Order, observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<Order>>;
    placeOrder(order?: Order, observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/store/order`;

        const requestOptions: any = {
          observe: observe as any,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, order, requestOptions);
    }

    getOrderById(orderId: number, observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<Order>;
    getOrderById(orderId: number, observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<Order>>;
    getOrderById(orderId: number, observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<Order>>;
    getOrderById(orderId: number, observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/store/order/${orderId}`;

        const requestOptions: any = {
          observe: observe as any,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    deleteOrder(orderId: number, observe?: 'body', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<any>;
    deleteOrder(orderId: number, observe?: 'response', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpResponse<any>>;
    deleteOrder(orderId: number, observe?: 'events', options?: { headers?: HttpHeaders; reportProgress?: boolean; responseType?: 'json'; withCredentials?: boolean; context?: HttpContext; }): Observable<HttpEvent<any>>;
    deleteOrder(orderId: number, observe?: 'body' | 'events' | 'response', options?: { headers?: HttpHeaders; params?: HttpParams; reportProgress?: boolean; responseType?: 'arraybuffer' | 'blob' | 'json' | 'text'; withCredentials?: boolean; context?: HttpContext; }): Observable<any> {
        const url = `${this.basePath}/store/order/${orderId}`;

        const requestOptions: any = {
          observe: observe as any,
          reportProgress: options?.reportProgress,
          withCredentials: options?.withCredentials,
          context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.delete(url, requestOptions);
    }
}
