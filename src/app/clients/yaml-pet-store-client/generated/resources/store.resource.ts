/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* `httpResource` is still an experimental feature - NOT PRODUCTION READY
* Generated Angular service for StoreResource
* Do not edit this file manually
*/
import { HttpContext, HttpContextToken, HttpHeaders, HttpParams, httpResource, HttpResourceOptions, HttpResourceRef, HttpResourceRequest } from "@angular/common/http";
import { inject, Injectable, Signal } from "@angular/core";
import { BASE_PATH_PETSTOREYAML, CLIENT_CONTEXT_TOKEN_PETSTOREYAML } from "../tokens";
import { HttpParamsBuilder } from "../utils/http-params-builder";
import { Order } from "../models";

@Injectable({ providedIn: "root" })
export class StoreResource {
    private readonly basePath: string = inject(BASE_PATH_PETSTOREYAML);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_PETSTOREYAML;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'PetStoreYaml');
    }

    getInventory(resourceOptions: HttpResourceOptions<Record<string, any>, unknown> & { defaultValue: NoInfer<Record<string, any>> }, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<Record<string, any>>;
    getInventory(resourceOptions?: HttpResourceOptions<Record<string, any>, unknown>, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<Record<string, any> | undefined>;
    /** Returns a map of status codes to quantities. */
    getInventory(resourceOptions?: HttpResourceOptions<Record<string, any>, unknown>, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<Record<string, any> | undefined> {
        return httpResource(() => {
            return {
                url: `${this.basePath}/store/inventory`,
                method: "GET",
                context: this.createContextWithClientId(requestOptions?.context),
                ...requestOptions
            }
        }, resourceOptions);
    }

    getOrderById(orderId: Signal<number> | number, resourceOptions: HttpResourceOptions<Order, unknown> & { defaultValue: NoInfer<Order> }, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<Order>;
    getOrderById(orderId: Signal<number> | number, resourceOptions?: HttpResourceOptions<Order, unknown>, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<Order | undefined>;
    /** For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions. */
    getOrderById(orderId: Signal<number> | number, resourceOptions?: HttpResourceOptions<Order, unknown>, requestOptions?: Omit<HttpResourceRequest, "method" | "url" | "params">): HttpResourceRef<Order | undefined> {
        return httpResource(() => {
            return {
                url: `${this.basePath}/store/order/${typeof orderId === 'function' ? orderId() : orderId}`,
                method: "GET",
                context: this.createContextWithClientId(requestOptions?.context),
                ...requestOptions
            }
        }, resourceOptions);
    }
}
