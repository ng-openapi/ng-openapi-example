/* @ts-nocheck */
/* eslint-disable */
/* @noformat */
/* @formatter:off */
/**
* Generated by ng-openapi
* Generated Angular service for User controller
* Do not edit this file manually
*/
import { Injectable, inject } from "@angular/core";
import { HttpClient, HttpParams, HttpHeaders, HttpContext, HttpResponse, HttpEvent, HttpContextToken } from "@angular/common/http";
import { Observable, map } from "rxjs";
import { BASE_PATH_PETSTOREURL, CLIENT_CONTEXT_TOKEN_PETSTOREURL } from "../tokens";
import { RequestOptions, User } from "../models";

@Injectable({ providedIn: "root" })
export class UserService {
    private readonly httpClient: HttpClient = inject(HttpClient);
    private readonly basePath: string = inject(BASE_PATH_PETSTOREURL);
    private readonly clientContextToken: HttpContextToken<string> = CLIENT_CONTEXT_TOKEN_PETSTOREURL;

    private createContextWithClientId(existingContext?: HttpContext): HttpContext {
        const context = existingContext || new HttpContext();
        return context.set(this.clientContextToken, 'PetStoreUrl');
    }

    createUser(user?: User, observe?: 'body', options?: RequestOptions<'json'>): Observable<User>;
    createUser(user?: User, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<User>>;
    createUser(user?: User, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<User>>;
    /** This can only be done by the logged in user. */
    createUser(user?: User, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, user, requestOptions);
    }

    createUsersWithListInput(requestBody?: User[], observe?: 'body', options?: RequestOptions<'json'>): Observable<User>;
    createUsersWithListInput(requestBody?: User[], observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<User>>;
    createUsersWithListInput(requestBody?: User[], observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<User>>;
    /** Creates list of users with given input array. */
    createUsersWithListInput(requestBody?: User[], observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/createWithList`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.post(url, requestBody, requestOptions);
    }

    loginUser(username?: string, password?: string, observe?: 'body', options?: RequestOptions<'text'>): Observable<string>;
    loginUser(username?: string, password?: string, observe?: 'response', options?: RequestOptions<'text'>): Observable<HttpResponse<string>>;
    loginUser(username?: string, password?: string, observe?: 'events', options?: RequestOptions<'text'>): Observable<HttpEvent<string>>;
    /** Log into the system. */
    loginUser(username?: string, password?: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/login`;

        let params = new HttpParams();
        if (username !== undefined) {
            params = params.set('username', String(username));
        }
        if (password !== undefined) {
            params = params.set('password', String(password));
        }

        const requestOptions: any = {
            observe: observe as any,
            params,
            responseType: 'text' as 'text',
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    logoutUser(observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    logoutUser(observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    logoutUser(observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    /** Log user out of the system. */
    logoutUser(observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/logout`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    getUserByName(username: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<User>;
    getUserByName(username: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<User>>;
    getUserByName(username: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<User>>;
    /** Get user detail based on username. */
    getUserByName(username: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.get(url, requestOptions);
    }

    updateUser(username: string, user?: User, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    updateUser(username: string, user?: User, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    updateUser(username: string, user?: User, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    /** This can only be done by the logged in user. */
    updateUser(username: string, user?: User, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.put(url, user, requestOptions);
    }

    deleteUser(username: string, observe?: 'body', options?: RequestOptions<'json'>): Observable<any>;
    deleteUser(username: string, observe?: 'response', options?: RequestOptions<'json'>): Observable<HttpResponse<any>>;
    deleteUser(username: string, observe?: 'events', options?: RequestOptions<'json'>): Observable<HttpEvent<any>>;
    /** This can only be done by the logged in user. */
    deleteUser(username: string, observe?: 'body' | 'events' | 'response', options?: RequestOptions<'arraybuffer' | 'blob' | 'json' | 'text'>): Observable<any> {
        const url = `${this.basePath}/user/${username}`;

        const requestOptions: any = {
            observe: observe as any,
            reportProgress: options?.reportProgress,
            withCredentials: options?.withCredentials,
            context: this.createContextWithClientId(options?.context)
        };

        return this.httpClient.delete(url, requestOptions);
    }
}
